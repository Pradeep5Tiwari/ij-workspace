Docker Registries:- A docker hub container is: "storage and distribution system for docker images"

Let's say we want to run a database container or redis or some log collector service container then how do we get their
docker images well that's where docker registries come in. So there are ready docker images available online in image
storage or registry. So basically this is a storage specifically for docker image type of artifacts and usually the company
is developing those services like mongodb, redis etc. as well as docker community itself will create what is called
official images so you know this mongodb image was created by mongodb itself or the docker community so you know its an
official verified image from docker itself and docker itself offers the biggest docker registry called "Docker Hub"

Docker Hub:- A storage where you can find any of these official images and many other images that different companies or individual
developers have created and uploaded there. Like regis, nginx, mongodb etc.

In below docker hub site you can get many images
Docker Hub:- https://hub.docker.com/

Note: Docker Hub is a Largest Public Registry.

Docker Official Images: A dedicated team is responsible for reviewing and publishing all content in the Docker Official
Images repositories. This Docker team works in collaboration with technology creator, software maintainers, security
experts. However anyone can participate as collaboration takes place openly on GitHUb.

https://hub.docker.com ---> In Docker Hub you can find any images for services that you want to use on docker hub.

Question:- Now the question is how we can get/pull the images from the docker hub? And download it locally on our computer?
so that we can start the container from that image.
Answer:- First we locate the image we want to run as container from docker hub.
Example: nginx (simple web server it has an UI) So, we will be able to access out container from the browser to validate
the container has started successfully that is why we are choosing nginx.

NGINX is open-source web server software used for reverse proxy, load balancing, and caching. It provides HTTPS server
capabilities and is mainly designed for maximum performance and stability. It also functions as a proxy server for email
communications protocols, such as IMAP, POP3, and SMTP.

First of all go to the terminal and type "docker pull nginx" OR
if want to download specific version then "docker pull nginx:1.25" so docker client will contact docker hub and will say
I want o grab nginx image with this specific tag(1.25 or latest) and download it locally.

Lets execute it by command "docker pull nginx:1.25" in terminal
As soon as we hit the above command in terminal you would see that its pulling the image from the image registry docker
hub and the reason why we don't have to tell the docker to find that image on docker hub is because docker hub is actually
the default location where docker will look for any images that we specify right here. so it's automatically configured as
location for downloading the images from and the download happened and now if we execute the command "docker images" again
as we did here we should actually see the one image now locally which is nginx with image tag 1.25.

Example:
pradeeptiwari@Pradeeps-MacBook-Pro ~ % docker images
REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
nginx        1.25      c42efe0b5438   12 days ago   135MB

And if we pull the nginx image without specifying any tag or version then it would download the latest tag/version.


Run an Image:- Now we have image locally but obviously they are useful only when we run them in container environment.
We simply pick the image along with TAG/version if any.

Example: "docker run nginx:1.25" --> This given above command will simply start the container based on the image.

In console you would see the container logs like below
Example:
***********************************************************************************************************************
/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration
/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/
/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh
10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf
10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf
/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh
/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh
/docker-entrypoint.sh: Configuration complete; ready for start up
2023/06/06 08:55:00 [notice] 1#1: using the "epoll" event method
2023/06/06 08:55:00 [notice] 1#1: nginx/1.25.0
2023/06/06 08:55:00 [notice] 1#1: built by gcc 10.2.1 20210110 (Debian 10.2.1-6)
2023/06/06 08:55:00 [notice] 1#1: OS: Linux 5.15.49-linuxkit-pr
2023/06/06 08:55:00 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576
2023/06/06 08:55:00 [notice] 1#1: start worker processes
2023/06/06 08:55:00 [notice] 1#1: start worker process 29
2023/06/06 08:55:00 [notice] 1#1: start worker process 30
2023/06/06 08:55:00 [notice] 1#1: start worker process 31
2023/06/06 08:55:00 [notice] 1#1: start worker process 32
***********************************************************************************************************************
If we want to see the docker process by executing the command: "docker ps" then you would see the one running container.
Example:
pradeeptiwari@Pradeeps-MacBook-Pro ~ % docker ps
CONTAINER ID   IMAGE        COMMAND                  CREATED         STATUS         PORTS     NAMES
50989d0099bc   nginx:1.25   "/docker-entrypoint.â€¦"   5 minutes ago   Up 5 minutes   80/tcp    happy_hermann

Docker generate the random name for the container automatically if you don't specify.
Like in above example we have "happy_hermann" as container name which is generated automatically when it created.

Press Ctrl + c if you want container to get exit.

If you want to run the container in background then you can simply add the flag -d or -detach= and prints the ID
Example: "docker run -d nginx:1.25" --> It will detach the docker process from the terminal.

As soon as you hit above command you would see that it will generate the one id and it won't appear in terminal and
to cross check whether it s running or ot you can via "docker ps" command.

But while container is running in background and if you want to see the application logs inside the container then
you can use another docker command "docker logs container_Id" and it will print out the application logs of container.

In order to create the container or nginx container we first pull the image and then we create a container from that image.
but we can actually save ourselves the "pull" command and execute "run" command directly even if the image is not
available locally.

Even if some images are not present locally and if the images that exists on docker hub then by executing the command
"docker run "

It is does not necessarily have to exist locally to your computer so you don't have to pull that first.
Example: If we don't have nginx image 1.25.0 in locally but using docker run command --> "docker run nginx:1.25.0" we
can run directly. so first it try to locate that image locally and if it does not find it then it will go to docker hub
by default and pull the image from there automatically which is very convenient. So does both in one command.

From: docker pull nginx:1.25 + docker run nginx:1.25
To:   ocker run nginx:1.25.0

Also docker solve the problem of running different version of same application at once.
Example: If we have nginx two version say 1.25 and a.12.0 then docker will run both version.














































