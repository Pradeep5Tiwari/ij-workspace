Port Binding:

* Application inside container runs in an "Isolated Docker Network".
* We need to expose the container port to "the host"( Its basically the machine on which container runs on).

Question: Now the question is how do we access these containers?
Answer: Well we can't because the container is running in closed docker network so we can't access it from our local
computer browser. We need to first expose the container to our local network which may sound a little bit difficult but
its super easy so, basically we are going to do "Port Binding".

So, as we know container is running on some port and each application has some standard port on which its run.
like nginx port by default run on port 80.
     redis run by default on port 6379
So, these are the standard port for these application and that's the port where container is running on and nginx we
see default port 80 and now if we try to access the nginx container on this port 80 from the browser then you would
see nothing would be available in localhost.

So, now we can tell docker that bind that container port 80 to our localhost port 8080/9000/ so that we can access container
whatever is running inside the container as if it was running on my localhost.

we can do that by additional flag when creating a docker container. Like below nginx port which is 80 please take that
and bind that on localhost 9000 port number for an example.

Example: "docker run -d -p 9000:80 nginx:1.25" so, this flag -p here will actually expose the container to our localhost.
So this nginx process running in container will accessible for us on port 9000.

Example: pradeeptiwari@Pradeeps-MacBook-Pro ~ % docker run -d -p 9000:80 nginx:1.25
         pradeeptiwari@Pradeeps-MacBook-Pro ~ % docker ps
         CONTAINER ID   IMAGE        COMMAND                  CREATED          STATUS          PORTS                  NAMES
 *     9eb06543cb5b   nginx:1.25   "/docker-entrypoint.…"   13 seconds ago   Up 13 seconds   0.0.0.0:9000->80/tcp   quizzical_jackson
         50989d0099bc   nginx:1.25   "/docker-entrypoint.…"   3 hours ago      Up 3 hours      80/tcp                 happy_hermann

If you would see above in * mark we have container port 80 in which nginx running is being exposed/bind to localhost port
9000. i.e 0.0.0.0:9000->80/tcp

Note: Only 1 service can run on one specific port on the host.

Now if we would run "http://localhost:9000" from local computer browser url then we would get nginx welcome message.

We can also see the logs which nginx produced in backend in terminal: Example:     docker logs container_id
                                                                              i.e: docker logs 9eb06543cb5b
Example: Below terminal example.

pradeeptiwari@Pradeeps-MacBook-Pro ~ % docker logs 9eb06543cb5b
/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration
/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/
/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh
10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf
10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf
/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh
/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh
/docker-entrypoint.sh: Configuration complete; ready for start up
2023/06/06 11:37:09 [notice] 1#1: using the "epoll" event method
2023/06/06 11:37:09 [notice] 1#1: nginx/1.25.0
2023/06/06 11:37:09 [notice] 1#1: built by gcc 10.2.1 20210110 (Debian 10.2.1-6)
2023/06/06 11:37:09 [notice] 1#1: OS: Linux 5.15.49-linuxkit-pr
2023/06/06 11:37:09 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576
2023/06/06 11:37:09 [notice] 1#1: start worker processes
2023/06/06 11:37:09 [notice] 1#1: start worker process 29
2023/06/06 11:37:09 [notice] 1#1: start worker process 30
2023/06/06 11:37:09 [notice] 1#1: start worker process 31
2023/06/06 11:37:09 [notice] 1#1: start worker process 32
172.17.0.1 - - [06/Jun/2023:11:42:27 +0000] "GET / HTTP/1.1" 200 615 "-" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36" "-"
2023/06/06 11:42:27 [error] 31#31: *1 open() "/usr/share/nginx/html/favicon.ico" failed (2: No such file or directory), client: 172.17.0.1, server: localhost, request: "GET /favicon.ico HTTP/1.1", host: "localhost:9000", referrer: "http://localhost:9000/"
172.17.0.1 - - [06/Jun/2023:11:42:27 +0000] "GET /favicon.ico HTTP/1.1" 404 555 "http://localhost:9000/" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36" "-"

So, this is how easy to run an application inside container and accessing it locally.
******************************************************************************************************************************
Choosing Host Port: Its general standard to use the same port on your host as container is using. means
if your MySQL service runs on 3306 port which is by default so your machine localhost port also should be same as 3306.





















